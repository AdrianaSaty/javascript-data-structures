# 98. Validate Binary Search Tree

## Solution

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isValidBST = function (root) {
  const DFS = (node, min, max) => {
    if (!node) return true;
    if (node.val <= min || node.val >= max) return false;

    return DFS(node.left, min, node.val) && DFS(node.right, node.val, max);
  };

  return DFS(root, -Infinity, Infinity);
};
```

### ðŸ“ˆ Complexity Analysis

- **Time Complexity:** $ O(n) $ <br>
  â†’ Each node is visited once, and .map() processes each child exactly once.<br>
  â†’ So if the tree has n nodes, the total work is linear in the number of nodes.
  <br>
  <br>
- **Space Complexity:** $O(h)$ - $O(logh)$<br>
  â†’ The space used is used by the call stack during recursion<br>
  â†’ In the worst case (e.g., a skewed tree), the stack goes as deep as the height of the tree, h.<br>
  â†’ No extra space is used apart from scalars and recursion.
  <br>
  <br>
  | Tree Type | Height (h) | Space Complexity |
  | ------------ | ---------- | ---------------- |
  | Balanced BST | O(log n) | O(log n) |
  | Skewed BST | O(n) | O(n) |
